import{randBetween as _}from"../node_modules/big-integer/BigInteger.js";var d=o(),l=class{#t=this.constructor.name;#e;#s;#r=o();constructor(t=d){this.#e=t??d,this.#s=n.addClass(this.#t,this.#e)}getClass(){return this.#s}toString(){return`class ${this.getClass().getName()}`}hashCode(){return this.#r}isEquals(t){return this===t}};var a=class extends l{#t=new Error;#e=null;constructor(t=void 0){super(),this.fillInStackTrace(),t!==void 0&&t!==""&&(this.#e=t)}get name(){return this.getClass().getName()}stack;get message(){return this.#e??""}toString(){let t=this.getClass().getName(),s=this.message;return s!==null?`${t}: ${s}`:t}printStackTrace(t=void 0){t===void 0?(console.log(this.toString()),this.printStackTrace0(process.stdout)):(t.write(`${this.toString()}`),this.printStackTrace0(t))}printStackTrace0(t){}fillInStackTrace(){let t=Error.stackTraceLimit;Error.stackTraceLimit=Number.POSITIVE_INFINITY,Error.captureStackTrace(this),Error.stackTraceLimit=t}};var c=class extends a{constructor(t=void 0){super(t)}};var m=class extends c{constructor(t=void 0){super(t)}};var S=class{#t=[];constructor(){}addClass(t,s){let r;for(let i=0;i<this.#t.length;i++){let g=this.#t[i];g.getName()===t&&g.getSerialBigInt()===s&&(r=this.#t[i])}return r!==void 0||(r=new u({className:t,serial:s}),this.#t.push(r)),r}getClasses(t){let s=[];if(this.#t.forEach(r=>{t===r.getName()&&s.push(r)}),s.length>0)return s;throw new m("Class Not Found")}getAllClasses(){return this.#t}tryBecomeClass({object:t,className:s}){try{let r=this.getClasses(s),i=!1;if(r.forEach(function(g){t.getClass()===g&&(i=!0)}),i)return t;throw new Error("Not Convertable, Throw new Error to be catch")}catch{return}}};function o(e){let t=e?.min||"-1e100",s=e?.max||"1e100";return BigInt(_(t.toString(),s.toString()).toString())}var n=new S;function p(e){return n.getClasses(e)}function h(e){return p(e)[0]}function b(){return n.getAllClasses()}function J({object:e,className:t}){return n.tryBecomeClass({object:e,className:t})}var C,I=o();function T(){return C}var u=class{#t=this.constructor.name;#e=T;#s="";#r;constructor({className:t,serial:s}){this.#r=s,this.#s=t}getClass(){return this.#e()}getName(){return this.#s}getSerialBigInt(){return this.#r}isEquals(t){return this.getName()===t.getName()&&this.getSerialBigInt()===t.getSerialBigInt()}};C=n.addClass("JSClass",I);var f=class extends a{constructor(t=void 0){super(t),Error.captureStackTrace(this)}};export{m as ClassNotFoundError,u as JSClass,c as JSError,f as JSException,l as JSObject,b as JSSystemGetAllClasses,h as JSSystemGetClass,p as JSSystemGetClasses,J as JSSystemTryBecomeClass,o as Random_Serial_BigInt,a as Throwable};
